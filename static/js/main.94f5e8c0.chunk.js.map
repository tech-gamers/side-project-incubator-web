{"version":3,"sources":["app/home/Home.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","type","size","block","icon","faGithub","faWeixin","Component","Content","Layout","Footer","App","src","alt","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oXAyBeA,E,uKAjBX,OACE,yBAAKC,UAAU,kBACb,wGACA,iUACA,6BACA,kBAAC,IAAD,CAAQC,KAAK,UAAUC,KAAK,QAAQC,OAAK,GAAzC,2BAEE,kBAAC,IAAD,CAAiBC,KAAMC,OAEzB,kBAAC,IAAD,CAAQJ,KAAK,UAAUC,KAAK,QAAQC,OAAK,EAACH,UAAU,gCAApD,2BAEE,kBAAC,IAAD,CAAiBI,KAAME,Y,GAbdC,aCDXC,EAAoBC,IAApBD,QAASE,EAAWD,IAAXC,OAqBFC,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,4BAAQX,UAAU,mBAChB,6BAASA,UAAU,aACjB,yBAAKA,UAAU,iBACb,yBAAKY,IAAI,0BAA0BC,IAAI,SADzC,8BAMJ,kBAACL,EAAD,CAASR,UAAU,oBACjB,kBAAC,EAAD,OAEF,kBAACU,EAAD,CAAQI,MAAO,CAAEC,UAAW,WAA5B,qCCTcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.94f5e8c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Home.scss';\nimport { Button } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub, faWeixin } from '@fortawesome/free-brands-svg-icons';\n\nclass Home extends Component<{}, {}> {\n  render() {\n    return (\n      <div className=\"container mt-5\">\n        <h2>欢迎来到【玩儿技术】社区</h2>\n        <h2>在这里找到志同道合的技术热爱者一起享受创造的乐趣！ 社区网站正在从零开始搭建当中。我们需要你的协助</h2>\n        <br />\n        <Button type=\"default\" size=\"large\" block>\n          Sign in with Github &nbsp;\n          <FontAwesomeIcon icon={faGithub} />\n        </Button>\n        <Button type=\"default\" size=\"large\" block className=\"mt-3 spi-home__signin-wechat\">\n          Sign in with Wechat &nbsp;\n          <FontAwesomeIcon icon={faWeixin} />\n        </Button>\n      </div>\n    );\n  }\n}\nexport default Home;\n","import React from 'react';\nimport './App.scss';\nimport { Layout } from 'antd';\nimport Home from './home/Home';\n\nconst { Content, Footer } = Layout;\n\nfunction App() {\n  return (\n    <Layout>\n      <header className=\"spi-app__header\">\n        <section className=\"container\">\n          <div className=\"spi-app__logo\">\n            <img src=\"/side-project-incubator-web/assets/images/logo.png\" alt=\"logo\" />\n            玩儿技术\n          </div>\n        </section>\n      </header>\n      <Content className=\"spi-app__content\">\n        <Home />\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>©2020 Created by Tech Gamers</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
